name: OpenShift

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}

  APP_NAME: ""

  APP_PORT: ""

  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}

  IMAGE_TAGS: "1.0.${{ github.run_number }}"

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]

jobs:
 
  openshift-ci-cd:
    # üñäÔ∏è Uncomment this if you are using CRDA scan step above
    # needs: crda-scan
    name: Build and deploy to OpenShift
    runs-on: ubuntu-latest
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/buildah-build#readm
    - name: Build from Dockerfile
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}

        dockerfiles: |
          ./Dockerfile
        
    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: my deployment 
      run: |
        export IMAGE=${{ steps.push-image.outputs.registry-path }}
        export OPENSHIFT_NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }}
        export APP_NAME=${{ env.APP_NAME }}

        
        echo ${{ steps.push-image.outputs.registry-path }}
        sed -i 's|\${IMAGE}|'"$IMAGE"'|g' deployment/base/deployment-w-storage.yaml deployment/overlays/release/deployment-w-storage-patch.yaml deployment/base/service.yaml
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g' deployment/base/deployment-w-storage.yaml deployment/overlays/release/deployment-w-storage-patch.yaml deployment/base/service.yaml  deployment/base/configmap-w-storage.yaml deployment/base/secret.yaml  
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' deployment/base/deployment-w-storage.yaml deployment/overlays/release/deployment-w-storage-patch.yaml deployment/base/service.yaml  deployment/base/configmap-w-storage.yaml deployment/base/secret.yaml  
        sed -i 's|\${IMAGE}|'"$IMAGE"'|g' deployment/base/deployment-w-storage.yaml deployment/base/service.yaml
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g'  deployment/base/pvc.yaml deployment/overlays/release/configmap-patch.yaml deployment/overlays/release/service-patch.yaml 
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' deployment/base/pvc.yaml deployment/overlays/release/configmap-patch.yaml deployment/overlays/release/service-patch.yaml
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g' deployment/base/route.yaml deployment/overlays/release/kustomization.yaml deployment/overlays/release/route-patch.yaml
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' deployment/base/route.yaml deployment/overlays/release/route-patch.yaml
        
        oc apply -f deployment/base/pvc.yaml
        oc apply -f deployment/base/configmap-w-storage.yaml -f deployment/base/secret.yaml
        oc apply -f deployment/base/deployment-w-storage.yaml -f deployment/base/service.yaml
        
        #kustomize
        oc apply -k deployment/overlays/release        
        
        oc get pods

    - name: create route
      run: | 
        export OPENSHIFT_NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }}
        export APP_NAME=${{ env.APP_NAME }}
        
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g' deployment/base/route.yaml
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' deployment/base/route.yaml
        oc apply -f deployment/base/route.yaml
